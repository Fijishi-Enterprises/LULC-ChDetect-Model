import numpy as np
import pandas as pd

import pkg_resources


class FormatGcamDataFrame:
    """Format a data frame output as generated by `gcamwrapper` for all land categories leaving irrigated and rainfed use
    as well as management (hi, lo) separated.

    :param df:                          Pandas dataframe of land allocation from gcamwrapper
    :type df:                           DataFrame

    :param f_out:                       Full path with file name and extension to save the output
    :type f_out:                        str

    :param start_year:                  Start year
    :type start_year:                   int

    :param through_year:                Through year
    :type through_year:                 int

    :param region_name_field:           Region field name in the GCAM region reference file
    :type region_name_field:            str

    :param region_id_field:             Region id field name in the GCAM region reference file
    :type region_name_field:            str


    :param basin_name_field:            Basin GLU abbreviation field name in the GCAM basin reference file
    :type basin_name_field:             str


    :param basin_id_field:              Basin id field name in the GCAM basin reference file
    :type basin_id_field:               str


    :param output_to_csv:               If True, file will be output to the location specified in the f_out parameter
    :type output_to_csv:                bool


    :return:                            Data frame; optionally, save as file


    Expecting this format from `gcamwrapper` data frame:

               region          child-nodes  year  land-allocation
    0  Africa_Eastern  Corn_AfrCstE_IRR_hi  1975         0.009381
    1  Africa_Eastern  Corn_AfrCstE_IRR_hi  1990         0.008705
    2  Africa_Eastern  Corn_AfrCstE_IRR_hi  2005         0.010365
    3  Africa_Eastern  Corn_AfrCstE_IRR_hi  2010         0.012348
    4  Africa_Eastern  Corn_AfrCstE_IRR_hi  2015         0.013194
    ...

    """

    # GCAM naming conventions nested in the GCAM database outputs for land allocation
    GCAM_YEAR_FIELD = 'year'
    GCAM_UNIT_FIELD = 'units'
    GCAM_REGION_FIELD = 'region'
    GCAM_LANDALLOC_FIELD = 'land-allocation'
    GCAM_NODES_FIELD = 'child-nodes'
    GCAM_LANDCLASS_DELIM = '_'

    # Demeter expected naming conventions
    DEMETER_REGID_FIELD = 'region_id'
    DEMETER_LANDCLASS_FIELD = 'landclass'
    DEMETER_METRIC_FIELD = 'metric_id'
    DEMETER_BASIN_NAME_FIELD = 'glu_name'

    def __init__(self, df, f_out=None, start_year=2010, through_year=2100, region_name_field='gcam_region_name',
                 region_id_field='gcam_region_id', basin_name_field='glu_name', basin_id_field='basin_id',
                 output_to_csv=False):

        self.df = df
        self.f_basin_ref = pkg_resources.resource_filename('demeter', 'data/gcam_basin_lookup.csv')
        self.f_region_ref = pkg_resources.resource_filename('demeter', 'data/gcam_regions_32.csv')
        self.start_year = start_year
        self.through_year = through_year
        self.f_out = f_out
        self.region_name_field = region_name_field
        self.region_id_field = region_id_field
        self.basin_name_field = basin_name_field
        self.basin_id_field = basin_id_field
        self.output_to_csv = output_to_csv

        # read in basins and regions to lookup dictionaries
        self.d_basins = self.build_basin_dict()
        self.d_regions = self.build_regions_dict()

    def build_basin_dict(self):
        """Create a basin lookup dictionary from the input reference file.
        File must be comma-separated with fields titled "basin_id" and "glu_name" for the basin id and
        basin GLU abbreviation, respectively.

        :return:              Dictionary {basin_name: basin_id}
        """
        return pd.read_csv(self.f_basin_ref,
                           usecols=[self.basin_id_field, self.basin_name_field],
                           index_col=self.basin_name_field).to_dict()[self.basin_id_field]

    def build_regions_dict(self):
        """Create a region lookup dictionary from the input reference file.
        File must be comma-separated with fields titled "region_id" and "region" for the region id and
        GCAM region name, respectively.

        :return:              Dictionary {region_name: region_id}
        """
        return pd.read_csv(self.f_region_ref,
                           usecols=[self.region_name_field, self.region_id_field],
                           index_col=self.region_name_field).to_dict()[self.region_id_field]

    def format_land_data(self):
        """Format land allocation data for use in Demeter. Optional:  save to file.

        :return:              Data frame
        """

        # get only target years as defined by the user
        df = self.df.loc[(self.df[FormatGcamDataFrame.GCAM_YEAR_FIELD] >= self.start_year) &
                         (self.df[FormatGcamDataFrame.GCAM_YEAR_FIELD] <= self.through_year)].copy()

        # split nodes field into list
        df[FormatGcamDataFrame.GCAM_NODES_FIELD] = df[FormatGcamDataFrame.GCAM_NODES_FIELD].str.split('_')

        # break out basin name
        df[FormatGcamDataFrame.DEMETER_BASIN_NAME_FIELD] = df[FormatGcamDataFrame.GCAM_NODES_FIELD].str[1]

        # map region id to region
        df[FormatGcamDataFrame.DEMETER_REGID_FIELD] = df[FormatGcamDataFrame.GCAM_REGION_FIELD].map(self.d_regions)

        # map basin id to basin name field
        df[FormatGcamDataFrame.DEMETER_METRIC_FIELD] = df[FormatGcamDataFrame.DEMETER_BASIN_NAME_FIELD].map(self.d_basins)

        # combine land type and use to make landclass; add IRR or RFD where applicable
        df[FormatGcamDataFrame.DEMETER_LANDCLASS_FIELD] = np.where(df[FormatGcamDataFrame.GCAM_NODES_FIELD].str[2].isnull(),
                                                                   df[FormatGcamDataFrame.GCAM_NODES_FIELD].str[0],
                                                                   df[FormatGcamDataFrame.GCAM_NODES_FIELD].str[0] +
                                                                   '_' +
                                                                   df[FormatGcamDataFrame.GCAM_NODES_FIELD].str[2])
        # pivot out the years and keep only needed fields
        piv = pd.pivot_table(df,
                             values=FormatGcamDataFrame.GCAM_LANDALLOC_FIELD,
                             index=[FormatGcamDataFrame.GCAM_REGION_FIELD,
                                    FormatGcamDataFrame.DEMETER_BASIN_NAME_FIELD,
                                    FormatGcamDataFrame.DEMETER_REGID_FIELD,
                                    FormatGcamDataFrame.DEMETER_METRIC_FIELD,
                                    FormatGcamDataFrame.DEMETER_LANDCLASS_FIELD],
                             columns=FormatGcamDataFrame.GCAM_YEAR_FIELD,
                             fill_value=0,
                             aggfunc=np.sum)

        piv.reset_index(inplace=True)

        if self.output_to_csv:

            if self.f_out is None:
                raise AttributeError('USAGE: Parameter for full path to output file name `f_out` not specified.')

            piv.to_csv(self.f_out, index=False)

        return piv


def format_gcam_data(df, f_out=None, start_year=2010, through_year=2100, region_name_field='gcam_region_name',
                     region_id_field='gcam_region_id', basin_name_field='glu_name', basin_id_field='basin_id',
                     output_to_csv=False):
    """Convenience wrapper for the `FormatGcamData` class.  Formats the data frame that `gcamwrapper` produces into
    the format the Demeter requires.

    :param df:                          Pandas dataframe of land allocation from gcamwrapper
    :type df:                           DataFrame

    :param f_out:                       Full path with file name and extension to save the output
    :type f_out:                        str

    :param start_year:                  Start year
    :type start_year:                   int

    :param through_year:                Through year
    :type through_year:                 int

    :param region_name_field:           Region field name in the GCAM region reference file
    :type region_name_field:            str

    :param region_id_field:             Region id field name in the GCAM region reference file
    :type region_name_field:            str


    :param basin_name_field:            Basin GLU abbreviation field name in the GCAM basin reference file
    :type basin_name_field:             str


    :param basin_id_field:              Basin id field name in the GCAM basin reference file
    :type basin_id_field:               str


    :param output_to_csv:               If True, file will be output to the location specified in the f_out parameter
    :type output_to_csv:                bool


    :return:                            Data frame; optionally, save as file


    """

    # instantiate the formatting class
    c = FormatGcamDataFrame(df, f_out, start_year, through_year, region_name_field, region_id_field, basin_name_field,
                            basin_id_field, output_to_csv)

    return c.format_land_data()
